- Lesser but real and done is greater. 

Comes down to factors:
- time estimates and hipothesis on best approach, should be as hard-to-vary, as possible - project begins there (to the degree it or its parts can be easily substituted for whatever else, then it's proportionally based on fabricated, made up crap, myths, whether overly sceptical or overly optimistic, it ruins project because it causes -> unreliable feedback -> impossible to make informed adjustments & checks = total failure)
- find all the key, likely time wastes and critically-too-much-time failure points
- also, don't find all of them or even many - just the key ones that, if addressed, greatly reduce the risk of project failing due to time waste and critical too-much-time failures
- KEY TO THAT: lesser but real and done is greater.


- learning to developing ratio (~20% learning 80% dev)
- keeping learning & development utterly distinct
- optimizing thresholds of diminishing returns (e.g. learning beyond 20-30% is often inferior proportion recipe, ceteris paribus, vs moving on to developing at that point )

- optimizing frame to look at it from
- plan, what can go wrong, what can waste time, what if progress is abhorrent, alternative routes & contingencies - START THERE

- one-two combos, prioritize & execute, being utterly ready to pounce on any opportunity to speed up development by that much
- regular rhytm, not rushing